{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from 'axios';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport * as SecureStore from 'expo-secure-store';\n\nvar AsyncStorage = require('@react-native-community/async-storage');\n\nvar config = {\n  baseURL: 'https://69a2d1e3ce3f.ngrok.io/api/'\n};\nvar client = axios.create(config);\nclient.interceptors.request.use(function _callee(config) {\n  var token;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!(Platform.OS === 'web')) {\n            _context.next = 6;\n            break;\n          }\n\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem('auth-token'));\n\n        case 3:\n          token = _context.sent;\n          _context.next = 9;\n          break;\n\n        case 6:\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(SecureStore.getItemAsync(\"auth-token\"));\n\n        case 8:\n          token = _context.sent;\n\n        case 9:\n          return _context.abrupt(\"return\", config);\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n});\nclient.interceptors.response.use(function _callee2(response) {\n  var token;\n  return _regeneratorRuntime.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          token = response.data ? response.data['Authorization'] : null;\n\n          if (!(Platform.OS === 'web')) {\n            _context2.next = 6;\n            break;\n          }\n\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem('auth-token'));\n\n        case 4:\n          _context2.next = 8;\n          break;\n\n        case 6:\n          _context2.next = 8;\n          return _regeneratorRuntime.awrap(SecureStore.setItemAsync(\"auth-token\", token));\n\n        case 8:\n          return _context2.abrupt(\"return\", response);\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n});\nexport default client;","map":{"version":3,"sources":["/Users/alecreser/Desktop/Projects/NearBye/services/baseService.ts"],"names":["axios","SecureStore","AsyncStorage","require","config","baseURL","client","create","interceptors","request","use","Platform","OS","getItem","token","getItemAsync","response","data","setItem","setItemAsync"],"mappings":";AAAA,OAAOA,KAAP,MAA8E,OAA9E;;AAEA,OAAO,KAAKC,WAAZ,MAA6B,mBAA7B;;AACA,IAAMC,YAAY,GAAGC,OAAO,CAAC,uCAAD,CAA5B;;AAEA,IAAMC,MAA0B,GAAG;AAC/BC,EAAAA,OAAO,EAAE;AADsB,CAAnC;AAQA,IAAMC,MAAqB,GAAGN,KAAK,CAACO,MAAN,CAAaH,MAAb,CAA9B;AACAE,MAAM,CAACE,YAAP,CAAoBC,OAApB,CAA4BC,GAA5B,CAAgC,iBAAON,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAExBO,QAAQ,CAACC,EAAT,KAAgB,KAFQ;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAGVV,YAAY,CAACW,OAAb,CAAqB,YAArB,CAHU;;AAAA;AAGxBC,UAAAA,KAHwB;AAAA;AAAA;;AAAA;AAAA;AAAA,2CAKVb,WAAW,CAACc,YAAZ,CAAyB,YAAzB,CALU;;AAAA;AAKxBD,UAAAA,KALwB;;AAAA;AAAA,2CAcrBV,MAdqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhC;AAiBAE,MAAM,CAACE,YAAP,CAAoBQ,QAApB,CAA6BN,GAA7B,CAAiC,kBAAOM,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACzBF,UAAAA,KADyB,GACjBE,QAAQ,CAACC,IAAT,GAAgBD,QAAQ,CAACC,IAAT,CAAc,eAAd,CAAhB,GAAiD,IADhC;;AAAA,gBAGzBN,QAAQ,CAACC,EAAT,KAAgB,KAHS;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAInBV,YAAY,CAACgB,OAAb,CAAqB,YAArB,CAJmB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,2CAMnBjB,WAAW,CAACkB,YAAZ,CAAyB,YAAzB,EAAuCL,KAAvC,CANmB;;AAAA;AAAA,4CAStBE,QATsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjC;AAYA,eAAeV,MAAf","sourcesContent":["import axios, { AxiosInstance, AxiosRequestConfig, AxiosRequestHeaders } from 'axios';\nimport { Platform } from 'react-native';\nimport * as SecureStore from 'expo-secure-store';\nconst AsyncStorage = require('@react-native-community/async-storage');\n\nconst config: AxiosRequestConfig = {\n    baseURL: 'https://69a2d1e3ce3f.ngrok.io/api/',\n};\n\ntype Headers = {\n    common: any\n}\n\nconst client: AxiosInstance = axios.create(config);\nclient.interceptors.request.use(async (config) => {\n    let token;\n    if (Platform.OS === 'web') {\n        token = await AsyncStorage.getItem('auth-token');\n    } else {\n        token = await SecureStore.getItemAsync(\"auth-token\");\n    }\n\n    \n    // console.log(sessionStorage);\n    // const token = JSON.parse(sessionStorage.getItem('data')!);\n    // const auth = token ? `Bearer ${token}` : '';\n    // console.log(config.headers);\n    // (config.headers as Headers).common.Authorization = auth;\n    return config;\n});\n\nclient.interceptors.response.use(async (response) => {\n    let token = response.data ? response.data['Authorization'] : null;\n\n    if (Platform.OS === 'web') {\n        await AsyncStorage.setItem('auth-token');\n    } else {\n        await SecureStore.setItemAsync(\"auth-token\", token);\n    }\n\n    return response;\n})\n\nexport default client;"]},"metadata":{},"sourceType":"module"}