{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport var handleResponse = function handleResponse(promise) {\n  var response, _response;\n\n  return _regeneratorRuntime.async(function handleResponse$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.log('here');\n          _context.prev = 1;\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(promise);\n\n        case 4:\n          response = _context.sent;\n          return _context.abrupt(\"return\", {\n            success: response.data\n          });\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](1);\n\n          if (!_context.t0.response) {\n            _context.next = 13;\n            break;\n          }\n\n          _response = _context.t0.response;\n          return _context.abrupt(\"return\", {\n            error: _response.data.message\n          });\n\n        case 13:\n          return _context.abrupt(\"return\", {\n            error: 'Something went wrong'\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[1, 8]], Promise);\n};","map":{"version":3,"sources":["/Users/alecreser/Desktop/Projects/NearBye/helpers/httpResponseHelper.ts"],"names":["handleResponse","promise","console","log","response","success","data","error","message"],"mappings":";AAEA,OAAO,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAAOC,OAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC1BC,UAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AAD0B;AAAA;AAAA,2CAGCF,OAHD;;AAAA;AAGhBG,UAAAA,QAHgB;AAAA,2CAIf;AACHC,YAAAA,OAAO,EAAED,QAAQ,CAACE;AADf,WAJe;;AAAA;AAAA;AAAA;;AAAA,eAQlB,YAAIF,QARc;AAAA;AAAA;AAAA;;AASZA,UAAAA,SATY,GASwB,YAAIA,QAT5B;AAAA,2CAUX;AACHG,YAAAA,KAAK,EAAEH,SAAQ,CAACE,IAAT,CAAcE;AADlB,WAVW;;AAAA;AAAA,2CAcf;AACHD,YAAAA,KAAK,EAAE;AADJ,WAde;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB","sourcesContent":["import { AxiosResponse } from \"axios\";\n\nexport const handleResponse = async (promise: Promise<AxiosResponse<any, any>>) => {\n    console.log('here')\n    try {\n        const response = await promise;\n        return {\n            success: response.data\n        }\n    } catch (err: any) {\n        if (err.response) {\n            const response: AxiosResponse<any, any> = err.response;\n            return {\n                error: response.data.message\n            }\n        }\n        return {\n            error: 'Something went wrong'\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}