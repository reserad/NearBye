{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useRef, useState } from \"react\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport var OTP = function OTP(props) {\n  var input = useRef(null);\n  var pinCount = props.pinCount;\n\n  var _useState = useState(new Array(pinCount).fill(\"\")),\n      _useState2 = _slicedToArray(_useState, 2),\n      otpValue = _useState2[0],\n      setOtpValue = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      nextInputIndex = _useState4[0],\n      setNextInputIndex = _useState4[1];\n\n  var handleChangeText = function handleChangeText(text, index) {\n    var newOtpValue = _toConsumableArray(otpValue);\n\n    newOtpValue[index] = text;\n    setOtpValue(newOtpValue);\n    var lastInputIndex = pinCount - 1;\n    var newInputIndex = 0;\n\n    if (!text) {\n      newInputIndex = index === 0 ? 0 : index - 1;\n    } else {\n      newInputIndex = index === lastInputIndex ? lastInputIndex : index + 1;\n    }\n\n    setNextInputIndex(newInputIndex);\n  };\n\n  useEffect(function () {\n    if (input.current) {\n      input.current.focus();\n    }\n  }, [nextInputIndex]);\n  return _jsx(KeyboardAvoidingView, {\n    children: _jsx(View, {\n      style: {\n        flexDirection: 'row',\n        alignItems: 'center'\n      },\n      children: _jsx(_Fragment, {\n        children: Array(pinCount).fill(\"\").map(function (_, index) {\n          var focused = nextInputIndex === index;\n          return _jsx(View, {\n            style: focused ? styles.SingleOTPElementFocused : styles.SingleOTPElement,\n            children: _jsx(TextInput, {\n              ref: nextInputIndex === index ? input : null,\n              keyboardType: \"numeric\",\n              textContentType: \"oneTimeCode\",\n              onChangeText: function onChangeText(text) {\n                return handleChangeText(text, index);\n              },\n              placeholder: \"0\",\n              maxLength: 1,\n              style: styles.input,\n              autoFocus: nextInputIndex === 0\n            })\n          }, index);\n        })\n      })\n    })\n  });\n};\nvar styles = StyleSheet.create({\n  SingleOTPElement: {\n    height: 50,\n    width: 50,\n    marginHorizontal: 5,\n    borderStyle: 'solid',\n    borderWidth: 2,\n    borderColor: '#0086A4'\n  },\n  SingleOTPElementFocused: {\n    height: 50,\n    width: 50,\n    marginHorizontal: 5,\n    borderStyle: 'solid',\n    borderWidth: 2,\n    borderColor: '#240071'\n  },\n  input: {\n    flex: 1,\n    textAlign: 'center'\n  }\n});","map":{"version":3,"sources":["/Users/alecreser/Desktop/Projects/NearBye/components/OTP.tsx"],"names":["useEffect","useRef","useState","OTP","props","input","pinCount","Array","fill","otpValue","setOtpValue","nextInputIndex","setNextInputIndex","handleChangeText","text","index","newOtpValue","lastInputIndex","newInputIndex","current","focus","flexDirection","alignItems","map","_","focused","styles","SingleOTPElementFocused","SingleOTPElement","StyleSheet","create","height","width","marginHorizontal","borderStyle","borderWidth","borderColor","flex","textAlign"],"mappings":"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","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport { KeyboardAvoidingView, StyleSheet, TextInput, View } from \"react-native\";\n\ntype OTPProps = {\n    pinCount: number;\n};\n\nexport const OTP = (props: OTPProps) => {\n    const input = useRef<TextInput | null>(null);\n    const {pinCount} = props;\n    const [otpValue, setOtpValue] = useState<string[]>(new Array(pinCount).fill(\"\"));\n    const [nextInputIndex, setNextInputIndex] = useState(0);\n\n    const handleChangeText = (text: string, index: number) => {\n        const newOtpValue = [...otpValue];\n        newOtpValue[index] = text;\n        setOtpValue(newOtpValue);\n\n        const lastInputIndex = pinCount - 1;\n        let newInputIndex = 0;\n        if (!text) {\n            newInputIndex = index === 0 ? 0 : index-1;\n        } else {\n            newInputIndex = index === lastInputIndex ? lastInputIndex : index + 1;\n        }\n        \n        setNextInputIndex(newInputIndex);\n    }\n\n    useEffect(() => {\n        if (input.current) {\n            input.current!.focus();\n        }\n    }, [nextInputIndex]);\n    \n    return (\n        <KeyboardAvoidingView>\n            <View style={{flexDirection: 'row', alignItems: 'center'}}>\n                <>\n                    {Array(pinCount).fill(\"\").map((_, index) => {\n                        const focused = nextInputIndex === index;\n                        return (\n                            <View key={index} style={focused ? styles.SingleOTPElementFocused : styles.SingleOTPElement }>\n                                <TextInput\n                                    ref={nextInputIndex === index ? input : null}\n                                    keyboardType=\"numeric\"\n                                    textContentType=\"oneTimeCode\"\n                                    onChangeText={text => handleChangeText(text, index)}\n                                    placeholder=\"0\"\n                                    maxLength={1}\n                                    style={styles.input}\n                                    autoFocus={nextInputIndex === 0}\n                                />\n                        </View>\n                        );\n                    })}\n                </>\n            </View>\n                \n        </KeyboardAvoidingView>\n    );\n}\n\nconst styles = StyleSheet.create({\n\tSingleOTPElement: {\n        height: 50,\n        width: 50,\n        marginHorizontal: 5,\n        borderStyle: 'solid',\n        borderWidth: 2,\n        borderColor: '#0086A4'\n\t},\n    SingleOTPElementFocused: {\n        height: 50,\n        width: 50,\n        marginHorizontal: 5,\n        borderStyle: 'solid',\n        borderWidth: 2,\n        borderColor: '#240071'\n\t},\n    input: {\n        flex: 1,\n        textAlign: 'center'\n    }\n});"]},"metadata":{},"sourceType":"module"}