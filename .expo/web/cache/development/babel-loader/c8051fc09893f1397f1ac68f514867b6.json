{"ast":null,"code":"import ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Colors from \"../constants/Colors\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var Button = function Button(props) {\n  var _ref;\n\n  var _props$color = props.color,\n      color = _props$color === void 0 ? 'neutral' : _props$color,\n      style = props.style,\n      value = props.value,\n      outline = props.outline,\n      children = props.children,\n      isLoading = props.isLoading,\n      onPress = props.onPress;\n  var buttonStyles = [];\n\n  switch (color) {\n    case 'green':\n      buttonStyles.push(styles.buttonGreenSolid);\n\n      if (outline) {\n        buttonStyles.push(styles.buttonGreenOutline);\n      }\n\n      break;\n\n    case 'neutral':\n    default:\n      buttonStyles.push(styles.buttonSolid);\n\n      if (outline) {\n        buttonStyles.push(styles.buttonOutline);\n      }\n\n  }\n\n  console.log(buttonStyles);\n  return _jsxs(TouchableOpacity, {\n    style: (_ref = [style, styles.button]).concat.apply(_ref, buttonStyles),\n    onPress: onPress,\n    children: [value && _jsxs(View, {\n      style: styles.valueContainer,\n      children: [isLoading && _jsx(ActivityIndicator, {\n        size: \"small\",\n        color: \"white\"\n      }), !isLoading && _jsx(Text, {\n        style: outline ? styles.buttonOutlineText : styles.buttonSolidText,\n        children: value\n      })]\n    }), !value && children && {\n      children: children\n    }]\n  });\n};\nvar styles = StyleSheet.create({\n  button: {\n    height: 50,\n    borderRadius: 10,\n    width: 287,\n    paddingHorizontal: 20,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  buttonGreenSolid: {\n    backgroundColor: Colors.nearByeGreen\n  },\n  buttonGreenOutline: {\n    borderColor: Colors.nearByeGreen,\n    borderWidth: 2\n  },\n  buttonSolid: {\n    backgroundColor: Colors.nearByeBlue\n  },\n  buttonOutline: {\n    borderColor: Colors.nearByeGreen,\n    borderWidth: 2\n  },\n  buttonSolidText: {\n    color: 'white',\n    fontWeight: 'bold'\n  },\n  buttonOutlineText: {\n    color: 'white',\n    fontWeight: 'bold'\n  },\n  valueContainer: {\n    alignItems: 'center',\n    flexDirection: 'row'\n  },\n  loadingIndicator: {\n    marginEnd: 20\n  }\n});","map":{"version":3,"sources":["/Users/alecreser/Desktop/Projects/NearBye/components/Button.tsx"],"names":["Colors","Button","props","color","style","value","outline","children","isLoading","onPress","buttonStyles","push","styles","buttonGreenSolid","buttonGreenOutline","buttonSolid","buttonOutline","console","log","button","concat","valueContainer","buttonOutlineText","buttonSolidText","StyleSheet","create","height","borderRadius","width","paddingHorizontal","alignItems","justifyContent","backgroundColor","nearByeGreen","borderColor","borderWidth","nearByeBlue","fontWeight","flexDirection","loadingIndicator","marginEnd"],"mappings":"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","sourcesContent":["\nimport { ActivityIndicator, StyleProp, StyleSheet, Text, TouchableOpacity, View, ViewStyle } from 'react-native';\nimport Colors from '../constants/Colors';\n\ntype ButtonProps = {\n\tcolor?: 'green' | 'neutral'\n\tstyle: StyleProp<ViewStyle>\n\tvalue?: string;\n\toutline?: boolean;\n\tisLoading?: boolean;\n\tonPress: () => void;\n}\n\nexport const Button: React.FC<ButtonProps> = (props) => {\n\tconst { color = 'neutral', style, value, outline, children, isLoading, onPress } = props;\n\n\tlet buttonStyles: any[] = [];\n\tswitch(color) {\n\t\tcase 'green':\n\t\t\tbuttonStyles.push(styles.buttonGreenSolid);\n\t\t\tif (outline) {\n\t\t\t\tbuttonStyles.push(styles.buttonGreenOutline);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'neutral':\n\t\tdefault:\n\t\t\tbuttonStyles.push(styles.buttonSolid);\n\t\t\tif (outline) {\n\t\t\t\tbuttonStyles.push(styles.buttonOutline);\n\t\t\t}\n\t}\n\n\tconsole.log(buttonStyles);\n\n\treturn (\n\t\t<TouchableOpacity style={[style, styles.button].concat(...buttonStyles)} onPress={onPress}>\n\t\t\t{value &&\n\t\t\t\t<View style={styles.valueContainer}>\n\t\t\t\t\t{isLoading && <ActivityIndicator size=\"small\" color=\"white\" />}\n\t\t\t\t\t{!isLoading && <Text style={outline ? styles.buttonOutlineText : styles.buttonSolidText}>{value}</Text>}\n\t\t\t\t</View>\n\t\t\t}\n\t\t\t{!value && children && { children }}\n\t\t</TouchableOpacity>\n\t);\n}\n\nconst styles = StyleSheet.create({\n\tbutton: {\n\t\theight: 50,\n\t\tborderRadius: 10,\n\t\twidth: 287,\n\t\tpaddingHorizontal: 20,\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center'\n\t},\n\tbuttonGreenSolid: {\n\t\tbackgroundColor: Colors.nearByeGreen\n\t},\n\tbuttonGreenOutline: {\n\t\tborderColor: Colors.nearByeGreen,\n\t\tborderWidth: 2\n\t},\n\tbuttonSolid: {\n\t\tbackgroundColor: Colors.nearByeBlue\n\t},\n\tbuttonOutline: {\n\t\tborderColor: Colors.nearByeGreen,\n\t\tborderWidth: 2\n\t},\n\tbuttonSolidText: {\n\t\tcolor: 'white',\n\t\tfontWeight: 'bold'\n\t},\n\tbuttonOutlineText: {\n\t\tcolor: 'white',\n\t\tfontWeight: 'bold'\n\t},\n\tvalueContainer: {\n\t\talignItems: 'center',\n\t\tflexDirection: 'row'\n\t},\n\tloadingIndicator: {\n\t\tmarginEnd: 20\n\t}\n});"]},"metadata":{},"sourceType":"module"}