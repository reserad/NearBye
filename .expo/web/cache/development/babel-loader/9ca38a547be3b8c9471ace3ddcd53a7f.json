{"ast":null,"code":"import axios from 'axios';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar config = {\n  baseURL: 'https://69a2d1e3ce3f.ngrok.io/api/'\n};\nvar client = axios.create(config);\nclient.interceptors.request.use(function (config) {\n  if (Platform.OS === 'web') {} else {}\n\n  return config;\n});\nclient.interceptors.response.use(function (response) {\n  console.log('hit2');\n  var token = response;\n  console.log(token);\n  return response;\n});\nexport default client;","map":{"version":3,"sources":["/Users/alecreser/Desktop/Projects/NearBye/services/baseService.ts"],"names":["axios","config","baseURL","client","create","interceptors","request","use","Platform","OS","response","console","log","token"],"mappings":"AAAA,OAAOA,KAAP,MAA8E,OAA9E;;AAIA,IAAMC,MAA0B,GAAG;AAC/BC,EAAAA,OAAO,EAAE;AADsB,CAAnC;AAQA,IAAMC,MAAqB,GAAGH,KAAK,CAACI,MAAN,CAAaH,MAAb,CAA9B;AACAE,MAAM,CAACE,YAAP,CAAoBC,OAApB,CAA4BC,GAA5B,CAAgC,UAACN,MAAD,EAAY;AACxC,MAAIO,QAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B,CAE1B,CAFD,MAEO,CAEN;;AAMD,SAAOR,MAAP;AACH,CAZD;AAcAE,MAAM,CAACE,YAAP,CAAoBK,QAApB,CAA6BH,GAA7B,CAAiC,UAACG,QAAD,EAAc;AAC3CC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,MAAMC,KAAK,GAAGH,QAAd;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACA,SAAOH,QAAP;AACH,CAND;AAQA,eAAeP,MAAf","sourcesContent":["import axios, { AxiosInstance, AxiosRequestConfig, AxiosRequestHeaders } from 'axios';\nimport { Platform } from 'react-native';\nimport * as SecureStore from 'expo-secure-store';\n\nconst config: AxiosRequestConfig = {\n    baseURL: 'https://69a2d1e3ce3f.ngrok.io/api/',\n};\n\ntype Headers = {\n    common: any\n}\n\nconst client: AxiosInstance = axios.create(config);\nclient.interceptors.request.use((config) => {\n    if (Platform.OS === 'web') {\n\n    } else {\n\n    }\n    // console.log(sessionStorage);\n    // const token = JSON.parse(sessionStorage.getItem('data')!);\n    // const auth = token ? `Bearer ${token}` : '';\n    // console.log(config.headers);\n    // (config.headers as Headers).common.Authorization = auth;\n    return config;\n});\n\nclient.interceptors.response.use((response) => {\n    console.log('hit2');\n    const token = response;\n\n    console.log(token);\n    return response;\n})\n\nexport default client;"]},"metadata":{},"sourceType":"module"}