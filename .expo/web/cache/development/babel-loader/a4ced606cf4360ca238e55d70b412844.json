{"ast":null,"code":"import { useRef, useEffect } from 'react';\n\nfunction usePrevious(value) {\n  var ref = useRef();\n  useEffect(function () {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n\nexport default usePrevious;","map":{"version":3,"sources":["/Users/alecreser/Desktop/Projects/NearBye/hooks/usePrevious.ts"],"names":["useRef","useEffect","usePrevious","value","ref","current"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;;AAEA,SAASC,WAAT,CAAwBC,KAAxB,EAAmC;AAC/B,MAAMC,GAAG,GAAGJ,MAAM,EAAlB;AAGAC,EAAAA,SAAS,CAAC,YAAM;AACZG,IAAAA,GAAG,CAACC,OAAJ,GAAcF,KAAd;AACH,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;AAKA,SAAOC,GAAG,CAACC,OAAX;AACH;;AAED,eAAeH,WAAf","sourcesContent":["import { useRef, useEffect } from 'react';\n\nfunction usePrevious<T>(value?: T) {\n    const ref = useRef<T>();\n\n    // Store current value in ref\n    useEffect(() => {\n        ref.current = value;\n    }, [value]); // Only re-run if value changes\n\n    // Return previous value (happens before update in useEffect above)\n    return ref.current;\n}\n\nexport default usePrevious;"]},"metadata":{},"sourceType":"module"}