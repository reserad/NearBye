{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useRef, useState } from \"react\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var OTP = function OTP(props) {\n  var length = props.length;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      inputs = _useState2[0],\n      setInputs = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      numericInputs = _useState4[0],\n      setNumericInputs = _useState4[1];\n\n  var handleSetInputs = function handleSetInputs(index, event) {\n    var newInputArray = _toConsumableArray(inputs);\n\n    var newNumericInputArray = _toConsumableArray(numericInputs);\n\n    newInputArray[index] = event.target.toString();\n    newNumericInputArray[index] = event.target;\n    setInputs(newInputArray);\n    setNumericInputs(newNumericInputArray);\n  };\n\n  return _jsx(View, {\n    children: Array.from(Array(length).keys()).map(function (entry) {\n      return _jsx(SingleOTPElement, {\n        value: inputs[entry],\n        onChange: function onChange(e) {\n          return handleSetInputs(entry, e);\n        },\n        maxLength: 1\n      }, \"OTP-\" + entry);\n    })\n  });\n};\n\nvar SingleOTPElement = function SingleOTPElement(props) {\n  var inputRef = useRef();\n  return _jsx(TextInput, _objectSpread(_objectSpread({}, props), {}, {\n    keyboardType: \"numeric\"\n  }));\n};","map":{"version":3,"sources":["/Users/alecreser/Desktop/Projects/NearBye/components/OTP.tsx"],"names":["useRef","useState","OTP","props","length","inputs","setInputs","numericInputs","setNumericInputs","handleSetInputs","index","event","newInputArray","newNumericInputArray","target","toString","Array","from","keys","map","entry","e","SingleOTPElement","inputRef"],"mappings":";;;;;;;;AAAA,SAAoBA,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;;;;AAOA,OAAO,IAAMC,GAAG,GAAG,SAANA,GAAM,CAACC,KAAD,EAAqB;AACpC,MAAOC,MAAP,GAAiBD,KAAjB,CAAOC,MAAP;;AACA,kBAA4BH,QAAQ,CAAW,EAAX,CAApC;AAAA;AAAA,MAAOI,MAAP;AAAA,MAAeC,SAAf;;AACA,mBAA0CL,QAAQ,CAAW,EAAX,CAAlD;AAAA;AAAA,MAAOM,aAAP;AAAA,MAAsBC,gBAAtB;;AAWA,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAgBC,KAAhB,EAA0E;AAC9F,QAAIC,aAAa,sBAAOP,MAAP,CAAjB;;AACA,QAAIQ,oBAAoB,sBAAON,aAAP,CAAxB;;AAEAK,IAAAA,aAAa,CAACF,KAAD,CAAb,GAAuBC,KAAK,CAACG,MAAN,CAAaC,QAAb,EAAvB;AACAF,IAAAA,oBAAoB,CAACH,KAAD,CAApB,GAA8BC,KAAK,CAACG,MAApC;AAEAR,IAAAA,SAAS,CAACM,aAAD,CAAT;AACAJ,IAAAA,gBAAgB,CAACK,oBAAD,CAAhB;AACH,GATD;;AAWA,SACI,KAAC,IAAD;AAAA,cACKG,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACZ,MAAD,CAAL,CAAcc,IAAd,EAAX,EAAiCC,GAAjC,CAAqC,UAAAC,KAAK,EAAI;AAoB3C,aACI,KAAC,gBAAD;AAEI,QAAA,KAAK,EAAEf,MAAM,CAACe,KAAD,CAFjB;AAII,QAAA,QAAQ,EAAE,kBAAAC,CAAC;AAAA,iBAAIZ,eAAe,CAACW,KAAD,EAAQC,CAAR,CAAnB;AAAA,SAJf;AAKI,QAAA,SAAS,EAAE;AALf,kBACgBD,KADhB,CADJ;AASH,KA7BA;AADL,IADJ;AAkCH,CA3DM;;AAmEP,IAAME,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACnB,KAAD,EAAkC;AACvD,MAAMoB,QAAQ,GAAGvB,MAAM,EAAvB;AACA,SACI,KAAC,SAAD,kCACQG,KADR;AAEI,IAAA,YAAY,EAAC;AAFjB,KADJ;AAMH,CARD","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport { NativeSyntheticEvent, TextInput, TextInputChangeEventData, View } from \"react-native\";\n\ntype OTPProps = {\n    length: number;\n};\n\nexport const OTP = (props: OTPProps) => {\n    const {length} = props;\n    const [inputs, setInputs] = useState<string[]>([]);\n    const [numericInputs, setNumericInputs] = useState<number[]>([]);\n    //const [inputRefs, setInputRefs] = useState([]);\n\n    // useEffect(() => {\n    //     let refs = Array.from(Array(length).keys()).map(entry => {\n    //         return useRef();\n    //     });\n\n        \n    // }, [length])\n\n    const handleSetInputs = (index: number, event: NativeSyntheticEvent<TextInputChangeEventData>) => {\n        let newInputArray = [...inputs];\n        let newNumericInputArray = [...numericInputs];\n\n        newInputArray[index] = event.target.toString();\n        newNumericInputArray[index] = event.target;\n        \n        setInputs(newInputArray);\n        setNumericInputs(newNumericInputArray);\n    }\n    \n    return (\n        <View>\n            {Array.from(Array(length).keys()).map(entry => {\n                // const handleInputFocus = (element: ) => {\n                //     if (elmnt.key === \"Delete\" || elmnt.key === \"Backspace\") {\n                //       const next = elmnt.target.tabIndex - 2;\n                //       if (next > -1) {\n                \n                //         elmnt.target.form.elements[next].focus()\n                //       }\n                //     }\n                //     else {\n                //       console.log(\"next\");\n                     \n                //         const next = elmnt.target.tabIndex;\n                //         if (next < 5) {\n                //           elmnt.target.form.elements[next].focus()\n                //         }\n                //     }\n                \n                //   }\n\n                return (\n                    <SingleOTPElement\n                        key={`OTP-${entry}`}\n                        value={inputs[entry]}\n                        //onKeyPress={this.keyPressed}\n                        onChange={e => handleSetInputs(entry, e)}\n                        maxLength={1}\n                    />\n                );\n            })}\n        </View>\n    );\n}\n\ntype SingleOTPElementProps = {\n    value: string;\n    onChange: (e: NativeSyntheticEvent<TextInputChangeEventData>) => void;\n    maxLength: number;\n};\n\nconst SingleOTPElement = (props: SingleOTPElementProps) => {\n    const inputRef = useRef();\n    return (\n        <TextInput\n            {...props}\n            keyboardType=\"numeric\"\n        />\n    );\n}"]},"metadata":{},"sourceType":"module"}