{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from 'axios';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport * as SecureStore from 'expo-secure-store';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nvar config = {\n  baseURL: 'https://69a2d1e3ce3f.ngrok.io/api/'\n};\nvar client = axios.create(config);\nclient.interceptors.request.use(function _callee(config) {\n  var token, auth;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          token = null;\n\n          if (!(Platform.OS === 'web')) {\n            _context.next = 7;\n            break;\n          }\n\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem('auth-token'));\n\n        case 4:\n          token = _context.sent;\n          _context.next = 10;\n          break;\n\n        case 7:\n          _context.next = 9;\n          return _regeneratorRuntime.awrap(SecureStore.getItemAsync(\"auth-token\"));\n\n        case 9:\n          token = _context.sent;\n\n        case 10:\n          auth = token != null ? \"Bearer \" + token : '';\n          config.headers.common.Authorization = auth;\n          return _context.abrupt(\"return\", config);\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n});\nclient.interceptors.response.use(function _callee2(response) {\n  var token;\n  return _regeneratorRuntime.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          token = response.headers ? response.data['Authorization'] : null;\n\n          if (!token) {\n            _context2.next = 10;\n            break;\n          }\n\n          console.log(token);\n\n          if (!(Platform.OS === 'web')) {\n            _context2.next = 8;\n            break;\n          }\n\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem('auth-token', token));\n\n        case 6:\n          _context2.next = 10;\n          break;\n\n        case 8:\n          _context2.next = 10;\n          return _regeneratorRuntime.awrap(SecureStore.setItemAsync(\"auth-token\", token));\n\n        case 10:\n          return _context2.abrupt(\"return\", response);\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n});\nexport default client;","map":{"version":3,"sources":["/Users/alecreser/Desktop/Projects/NearBye/services/baseService.ts"],"names":["axios","SecureStore","AsyncStorage","config","baseURL","client","create","interceptors","request","use","token","Platform","OS","getItem","getItemAsync","auth","headers","common","Authorization","response","data","console","log","setItem","setItemAsync"],"mappings":";AAAA,OAAOA,KAAP,MAA8E,OAA9E;;AAEA,OAAO,KAAKC,WAAZ,MAA6B,mBAA7B;AACA,OAAOC,YAAP,MAAyB,2CAAzB;AAEA,IAAMC,MAA0B,GAAG;AAC/BC,EAAAA,OAAO,EAAE;AADsB,CAAnC;AAQA,IAAMC,MAAqB,GAAGL,KAAK,CAACM,MAAN,CAAaH,MAAb,CAA9B;AACAE,MAAM,CAACE,YAAP,CAAoBC,OAApB,CAA4BC,GAA5B,CAAgC,iBAAON,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACxBO,UAAAA,KADwB,GAChB,IADgB;;AAAA,gBAExBC,QAAQ,CAACC,EAAT,KAAgB,KAFQ;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAGVV,YAAY,CAACW,OAAb,CAAqB,YAArB,CAHU;;AAAA;AAGxBH,UAAAA,KAHwB;AAAA;AAAA;;AAAA;AAAA;AAAA,2CAKVT,WAAW,CAACa,YAAZ,CAAyB,YAAzB,CALU;;AAAA;AAKxBJ,UAAAA,KALwB;;AAAA;AAQtBK,UAAAA,IARsB,GAQfL,KAAK,IAAI,IAAT,eAA0BA,KAA1B,GAAoC,EARrB;AAS3BP,UAAAA,MAAM,CAACa,OAAR,CAA4BC,MAA5B,CAAmCC,aAAnC,GAAmDH,IAAnD;AAT4B,2CAWrBZ,MAXqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhC;AAcAE,MAAM,CAACE,YAAP,CAAoBY,QAApB,CAA6BV,GAA7B,CAAiC,kBAAOU,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACzBT,UAAAA,KADyB,GACjBS,QAAQ,CAACH,OAAT,GAAmBG,QAAQ,CAACC,IAAT,CAAc,eAAd,CAAnB,GAAoD,IADnC;;AAAA,eAEzBV,KAFyB;AAAA;AAAA;AAAA;;AAGzBW,UAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAZ;;AAHyB,gBAIrBC,QAAQ,CAACC,EAAT,KAAgB,KAJK;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAKfV,YAAY,CAACqB,OAAb,CAAqB,YAArB,EAAmCb,KAAnC,CALe;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,2CAOfT,WAAW,CAACuB,YAAZ,CAAyB,YAAzB,EAAuCd,KAAvC,CAPe;;AAAA;AAAA,4CAWtBS,QAXsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjC;AAcA,eAAed,MAAf","sourcesContent":["import axios, { AxiosInstance, AxiosRequestConfig, AxiosRequestHeaders } from 'axios';\nimport { Platform } from 'react-native';\nimport * as SecureStore from 'expo-secure-store';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nconst config: AxiosRequestConfig = {\n    baseURL: 'https://69a2d1e3ce3f.ngrok.io/api/',\n};\n\ntype Headers = {\n    common: any\n}\n\nconst client: AxiosInstance = axios.create(config);\nclient.interceptors.request.use(async (config) => {\n    let token = null;\n    if (Platform.OS === 'web') {\n        token = await AsyncStorage.getItem('auth-token');\n    } else {\n        token = await SecureStore.getItemAsync(\"auth-token\");\n    }\n\n    const auth = token != null ? `Bearer ${token}` : '';\n    (config.headers as Headers).common.Authorization = auth;\n\n    return config;\n});\n\nclient.interceptors.response.use(async (response) => {\n    let token = response.headers ? response.data['Authorization'] : null;\n    if (token) {\n        console.log(token);\n        if (Platform.OS === 'web') {\n            await AsyncStorage.setItem('auth-token', token);\n        } else {\n            await SecureStore.setItemAsync(\"auth-token\", token);\n        }\n    }\n\n    return response;\n})\n\nexport default client;"]},"metadata":{},"sourceType":"module"}