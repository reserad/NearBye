{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _excluded = [\"focused\", \"index\", \"inputRefs\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var OTP = function OTP(props) {\n  var length = props.length;\n\n  var _useState = useState(new Array(length).fill(\"\")),\n      _useState2 = _slicedToArray(_useState, 2),\n      inputs = _useState2[0],\n      setInputs = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selectedIndex = _useState4[0],\n      setSelectedIndex = _useState4[1];\n\n  var _useState5 = useState(new Array(length).fill(null)),\n      _useState6 = _slicedToArray(_useState5, 2),\n      inputRefs = _useState6[0],\n      setInputRefs = _useState6[1];\n\n  var handleChangeText = function handleChangeText(index, value) {\n    console.log('hit');\n\n    var newInputArray = _toConsumableArray(inputs);\n\n    newInputArray[index] = value;\n    setInputs(newInputArray);\n\n    if (index < inputRefs.length) {\n      focusField(index);\n    } else {\n      blurAllFields();\n    }\n  };\n\n  var focusField = function focusField(index) {\n    if (index < inputRefs.length) {\n      console.log('focusField');\n      inputRefs[index].focus();\n      setSelectedIndex(index);\n    }\n  };\n\n  var blurAllFields = function blurAllFields() {\n    inputRefs.forEach(function (field) {\n      return field.blur();\n    });\n    setSelectedIndex(-1);\n  };\n\n  var handleKeyPressTextInput = function handleKeyPressTextInput(index, key) {\n    if (key === 'Backspace') {\n      if (!inputs[index] && index > 0) {\n        handleChangeText(index - 1, '');\n        focusField(index - 1);\n      }\n    }\n  };\n\n  var SingleOTPElement = function SingleOTPElement(props) {\n    var focused = props.focused,\n        index = props.index,\n        inputRefs = props.inputRefs,\n        rest = _objectWithoutProperties(props, _excluded);\n\n    return _jsx(TextInput, _objectSpread({\n      ref: function ref(_ref2) {\n        return inputRefs[index] = _ref2;\n      },\n      keyboardType: \"numeric\",\n      style: focused ? styles.SingleOTPElementFocused : styles.SingleOTPElement,\n      onKeyPress: function onKeyPress(_ref) {\n        var key = _ref.nativeEvent.key;\n        handleKeyPressTextInput(index, key);\n      }\n    }, rest));\n  };\n\n  return _jsx(View, {\n    style: {\n      flexDirection: 'row'\n    },\n    children: new Array(length).fill(\"\").map(function (_, index) {\n      return _jsx(SingleOTPElement, {\n        inputRefs: inputRefs,\n        index: index,\n        value: inputs[index],\n        onChangeText: function onChangeText(value) {\n          return handleChangeText(index, value);\n        },\n        maxLength: 1,\n        focused: selectedIndex === index\n      }, \"OTP-\" + index);\n    })\n  });\n};\nvar styles = StyleSheet.create({\n  SingleOTPElement: {\n    height: 50,\n    width: 50,\n    margin: 2,\n    borderStyle: 'solid',\n    borderWidth: 2,\n    borderColor: 'black'\n  },\n  SingleOTPElementFocused: {\n    height: 50,\n    width: 50,\n    margin: 2,\n    borderStyle: 'solid',\n    borderWidth: 2,\n    borderColor: 'white'\n  }\n});","map":{"version":3,"sources":["/Users/alecreser/Desktop/Projects/NearBye/components/OTP.tsx"],"names":["useState","OTP","props","length","Array","fill","inputs","setInputs","selectedIndex","setSelectedIndex","inputRefs","setInputRefs","handleChangeText","index","value","console","log","newInputArray","focusField","blurAllFields","focus","forEach","field","blur","handleKeyPressTextInput","key","SingleOTPElement","focused","rest","ref","styles","SingleOTPElementFocused","nativeEvent","flexDirection","map","_","StyleSheet","create","height","width","margin","borderStyle","borderWidth","borderColor"],"mappings":"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","sourcesContent":["import { MutableRefObject, useEffect, useLayoutEffect, useRef, useState } from \"react\";\nimport { NativeSyntheticEvent, StyleSheet, TextInput, TextInputChangeEventData, View } from \"react-native\";\nimport usePrevious from \"../hooks/usePrevious\";\n\ntype OTPProps = {\n    length: number;\n};\n\nexport const OTP = (props: OTPProps) => {\n    const {length} = props;\n    const [inputs, setInputs] = useState<string[]>(new Array(length).fill(\"\"));\n    const [selectedIndex, setSelectedIndex] = useState(0);\n    const [inputRefs, setInputRefs] = useState<(TextInput | null)[]>(new Array(length).fill(null));\n\n    // useEffect(() => {\n    //     let refs = Array.from(Array(length).keys()).map(entry => {\n    //         return useRef();\n    //     });\n\n        \n    // }, [length])\n\n    const handleChangeText = (index: number, value: string) => {\n        console.log('hit');\n        let newInputArray = [...inputs];\n        newInputArray[index] = value;\n        setInputs(newInputArray);\n        if (index < inputRefs.length) {\n            focusField(index);\n        } else {\n            blurAllFields();\n        }\n        // setFocusedIndex(index);\n    }\n\n    const focusField = (index: number) => {\n        if (index < inputRefs.length) {\n            console.log('focusField');\n            (inputRefs[index] as TextInput).focus();\n            setSelectedIndex(index);\n        }\n    }\n\n    const blurAllFields = () => {\n        inputRefs.forEach((field: TextInput | null) => (field as TextInput).blur())\n        setSelectedIndex(-1);\n    }\n\n    const handleKeyPressTextInput = (index: number, key: string) => {\n        if (key === 'Backspace') {\n            if (!inputs[index] && index > 0) {\n                handleChangeText(index - 1, '')\n                focusField(index - 1)\n            }\n        }\n    }\n\n    const SingleOTPElement = (props: SingleOTPElementProps) => {\n        const { focused, index, inputRefs, ...rest } = props;\n    \n        return (\n            <TextInput\n                ref={ref => inputRefs[index] = ref}\n                keyboardType=\"numeric\"\n                style={focused ? styles.SingleOTPElementFocused : styles.SingleOTPElement }\n                onKeyPress={({ nativeEvent: { key } }) => { handleKeyPressTextInput(index, key) }}\n                {...rest}\n            />\n        );\n    }\n    \n    return (\n        <View style={{flexDirection: 'row'}}>\n            {new Array(length).fill(\"\").map((_, index) => {\n                // const handleInputFocus = (element: ) => {\n                //     if (elmnt.key === \"Delete\" || elmnt.key === \"Backspace\") {\n                //       const next = elmnt.target.tabIndex - 2;\n                //       if (next > -1) {\n                \n                //         elmnt.target.form.elements[next].focus()\n                //       }\n                //     }\n                //     else {\n                //       console.log(\"next\");\n                     \n                //         const next = elmnt.target.tabIndex;\n                //         if (next < 5) {\n                //           elmnt.target.form.elements[next].focus()\n                //         }\n                //     }\n                \n                //   }\n\n                return (\n                    <SingleOTPElement\n                        key={`OTP-${index}`}\n                        inputRefs={inputRefs}\n                        index={index}\n                        value={inputs[index]}\n                        onChangeText={value => handleChangeText(index, value)}\n                        maxLength={1}\n                        focused={selectedIndex === index}\n                    />\n                );\n            })}\n        </View>\n    );\n}\n\ntype SingleOTPElementProps = {\n    value: string;\n    index: number,\n    onChangeText: (value: string) => void;\n    maxLength: number;\n    inputRefs: (TextInput | null) [],\n    focused: boolean;\n};\n\nconst styles = StyleSheet.create({\n\tSingleOTPElement: {\n        height: 50,\n        width: 50,\n        margin: 2,\n        borderStyle: 'solid',\n        borderWidth: 2,\n        borderColor: 'black'\n\t},\n    SingleOTPElementFocused: {\n        height: 50,\n        width: 50,\n        margin: 2,\n        borderStyle: 'solid',\n        borderWidth: 2,\n        borderColor: 'white'\n\t}\n});"]},"metadata":{},"sourceType":"module"}