{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport var handleResponse = function handleResponse(promise) {\n  var response, _response;\n\n  return _regeneratorRuntime.async(function handleResponse$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(promise);\n\n        case 3:\n          response = _context.sent;\n\n          if (!(response.status === 200)) {\n            _context.next = 8;\n            break;\n          }\n\n          return _context.abrupt(\"return\", {\n            success: response.data\n          });\n\n        case 8:\n          _context.next = 15;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n\n          if (!_context.t0.response) {\n            _context.next = 15;\n            break;\n          }\n\n          _response = _context.t0.response;\n          return _context.abrupt(\"return\", {\n            error: _response.data.message\n          });\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 10]], Promise);\n};","map":{"version":3,"sources":["/Users/alecreser/Desktop/Projects/NearBye/helpers/httpResponseHelper.ts"],"names":["handleResponse","promise","response","status","success","data","error","message"],"mappings":";AAEA,OAAO,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAAOC,OAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAECA,OAFD;;AAAA;AAEhBC,UAAAA,QAFgB;;AAAA,gBAGlBA,QAAQ,CAACC,MAAT,KAAoB,GAHF;AAAA;AAAA;AAAA;;AAAA,2CAIX;AACHC,YAAAA,OAAO,EAAEF,QAAQ,CAACG;AADf,WAJW;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,eAWlB,YAAIH,QAXc;AAAA;AAAA;AAAA;;AAYZA,UAAAA,SAZY,GAYwB,YAAIA,QAZ5B;AAAA,2CAaX;AACHI,YAAAA,KAAK,EAAEJ,SAAQ,CAACG,IAAT,CAAcE;AADlB,WAbW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB","sourcesContent":["import { AxiosResponse } from \"axios\";\n\nexport const handleResponse = async (promise: Promise<AxiosResponse<any, any>>) => {\n    try {\n        const response = await promise;\n        if (response.status === 200) {\n            return {\n                success: response.data\n            }\n        } else {\n \n        }\n    } catch (err: any) {\n        if (err.response) {\n            const response: AxiosResponse<any, any> = err.response;\n            return {\n                error: response.data.message\n            }\n        }\n        \n    }\n}"]},"metadata":{},"sourceType":"module"}