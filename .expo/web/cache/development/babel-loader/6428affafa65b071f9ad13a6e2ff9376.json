{"ast":null,"code":"import ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var Button = function Button(props) {\n  var style = props.style,\n      value = props.value,\n      outline = props.outline,\n      children = props.children,\n      isLoading = props.isLoading,\n      onPress = props.onPress;\n  return _jsxs(TouchableOpacity, {\n    style: [style, styles.button, outline ? styles.buttonOutline : styles.buttonSolid],\n    onPress: onPress,\n    children: [value && _jsxs(View, {\n      style: styles.valueContainer,\n      children: [isLoading && _jsx(ActivityIndicator, {\n        size: \"large\",\n        color: \"yellow\",\n        style: styles.loadingIndicator\n      }), _jsx(Text, {\n        style: outline ? styles.buttonOutlineText : styles.buttonSolidText,\n        children: value\n      })]\n    }), !value && children && {\n      children: children\n    }]\n  });\n};\nvar styles = StyleSheet.create({\n  button: {\n    height: 50,\n    borderRadius: 10,\n    width: 287,\n    paddingHorizontal: 20,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  buttonSolid: {\n    backgroundColor: '#53C08C'\n  },\n  buttonOutline: {\n    borderColor: '#53C08C',\n    borderWidth: 2\n  },\n  buttonSolidText: {\n    color: 'white',\n    fontWeight: 'bold'\n  },\n  buttonOutlineText: {\n    color: 'white',\n    fontWeight: 'bold'\n  },\n  valueContainer: {\n    alignItems: 'center',\n    flexDirection: 'row'\n  },\n  loadingIndicator: {\n    marginEnd: 20\n  }\n});","map":{"version":3,"sources":["/Users/alecreser/Desktop/Projects/NearBye/components/Button.tsx"],"names":["Button","props","style","value","outline","children","isLoading","onPress","styles","button","buttonOutline","buttonSolid","valueContainer","loadingIndicator","buttonOutlineText","buttonSolidText","StyleSheet","create","height","borderRadius","width","paddingHorizontal","alignItems","justifyContent","backgroundColor","borderColor","borderWidth","color","fontWeight","flexDirection","marginEnd"],"mappings":";;;;;;;AAWA,OAAO,IAAMA,MAA6B,GAAG,SAAhCA,MAAgC,CAACC,KAAD,EAAW;AACvD,MAAQC,KAAR,GAAgED,KAAhE,CAAQC,KAAR;AAAA,MAAeC,KAAf,GAAgEF,KAAhE,CAAeE,KAAf;AAAA,MAAsBC,OAAtB,GAAgEH,KAAhE,CAAsBG,OAAtB;AAAA,MAA+BC,QAA/B,GAAgEJ,KAAhE,CAA+BI,QAA/B;AAAA,MAAyCC,SAAzC,GAAgEL,KAAhE,CAAyCK,SAAzC;AAAA,MAAoDC,OAApD,GAAgEN,KAAhE,CAAoDM,OAApD;AAEA,SACC,MAAC,gBAAD;AAAkB,IAAA,KAAK,EAAE,CAACL,KAAD,EAAQM,MAAM,CAACC,MAAf,EAAuBL,OAAO,GAAGI,MAAM,CAACE,aAAV,GAA0BF,MAAM,CAACG,WAA/D,CAAzB;AAAsG,IAAA,OAAO,EAAEJ,OAA/G;AAAA,eACEJ,KAAK,IACL,MAAC,IAAD;AAAM,MAAA,KAAK,EAAEK,MAAM,CAACI,cAApB;AAAA,iBACEN,SAAS,IAAI,KAAC,iBAAD;AAAmB,QAAA,IAAI,EAAC,OAAxB;AAAgC,QAAA,KAAK,EAAC,QAAtC;AAA+C,QAAA,KAAK,EAAEE,MAAM,CAACK;AAA7D,QADf,EAEC,KAAC,IAAD;AAAM,QAAA,KAAK,EAAET,OAAO,GAAGI,MAAM,CAACM,iBAAV,GAA8BN,MAAM,CAACO,eAAzD;AAAA,kBAA2EZ;AAA3E,QAFD;AAAA,MAFF,EAOE,CAACA,KAAD,IAAUE,QAAV,IAAsB;AAAEA,MAAAA,QAAQ,EAARA;AAAF,KAPxB;AAAA,IADD;AAWA,CAdM;AAgBP,IAAMG,MAAM,GAAGQ,UAAU,CAACC,MAAX,CAAkB;AAChCR,EAAAA,MAAM,EAAE;AACPS,IAAAA,MAAM,EAAE,EADD;AAEPC,IAAAA,YAAY,EAAE,EAFP;AAGPC,IAAAA,KAAK,EAAE,GAHA;AAIPC,IAAAA,iBAAiB,EAAE,EAJZ;AAKPC,IAAAA,UAAU,EAAE,QALL;AAMPC,IAAAA,cAAc,EAAE;AANT,GADwB;AAShCZ,EAAAA,WAAW,EAAE;AACZa,IAAAA,eAAe,EAAE;AADL,GATmB;AAYhCd,EAAAA,aAAa,EAAE;AACde,IAAAA,WAAW,EAAE,SADC;AAEdC,IAAAA,WAAW,EAAE;AAFC,GAZiB;AAgBhCX,EAAAA,eAAe,EAAE;AAChBY,IAAAA,KAAK,EAAE,OADS;AAEhBC,IAAAA,UAAU,EAAE;AAFI,GAhBe;AAoBhCd,EAAAA,iBAAiB,EAAE;AAClBa,IAAAA,KAAK,EAAE,OADW;AAElBC,IAAAA,UAAU,EAAE;AAFM,GApBa;AAwBhChB,EAAAA,cAAc,EAAE;AACfU,IAAAA,UAAU,EAAE,QADG;AAEfO,IAAAA,aAAa,EAAE;AAFA,GAxBgB;AA4BhChB,EAAAA,gBAAgB,EAAE;AACjBiB,IAAAA,SAAS,EAAE;AADM;AA5Bc,CAAlB,CAAf","sourcesContent":["\nimport { ActivityIndicator, StyleProp, StyleSheet, Text, TouchableOpacity, View, ViewStyle } from 'react-native';\n\ntype ButtonProps = {\n\tstyle: StyleProp<ViewStyle>\n\tvalue?: string;\n\toutline?: boolean;\n\tisLoading?: boolean;\n\tonPress: () => void;\n}\n\nexport const Button: React.FC<ButtonProps> = (props) => {\n\tconst { style, value, outline, children, isLoading, onPress } = props;\n\n\treturn (\n\t\t<TouchableOpacity style={[style, styles.button, outline ? styles.buttonOutline : styles.buttonSolid]} onPress={onPress}>\n\t\t\t{value &&\n\t\t\t\t<View style={styles.valueContainer}>\n\t\t\t\t\t{isLoading && <ActivityIndicator size=\"large\" color=\"yellow\" style={styles.loadingIndicator} />}\n\t\t\t\t\t<Text style={outline ? styles.buttonOutlineText : styles.buttonSolidText}>{value}</Text>\n\t\t\t\t</View>\n\t\t\t}\n\t\t\t{!value && children && { children }}\n\t\t</TouchableOpacity>\n\t);\n}\n\nconst styles = StyleSheet.create({\n\tbutton: {\n\t\theight: 50,\n\t\tborderRadius: 10,\n\t\twidth: 287,\n\t\tpaddingHorizontal: 20,\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center'\n\t},\n\tbuttonSolid: {\n\t\tbackgroundColor: '#53C08C'\n\t},\n\tbuttonOutline: {\n\t\tborderColor: '#53C08C',\n\t\tborderWidth: 2\n\t},\n\tbuttonSolidText: {\n\t\tcolor: 'white',\n\t\tfontWeight: 'bold'\n\t},\n\tbuttonOutlineText: {\n\t\tcolor: 'white',\n\t\tfontWeight: 'bold'\n\t},\n\tvalueContainer: {\n\t\talignItems: 'center',\n\t\tflexDirection: 'row'\n\t},\n\tloadingIndicator: {\n\t\tmarginEnd: 20\n\t}\n});"]},"metadata":{},"sourceType":"module"}