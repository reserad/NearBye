{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _excluded = [\"focused\", \"index\", \"inputRefs\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport var OTP = function OTP(props) {\n  var pinCount = props.pinCount;\n\n  var _useState = useState(new Array(pinCount).fill(\"\")),\n      _useState2 = _slicedToArray(_useState, 2),\n      otpValue = _useState2[0],\n      setOtpValue = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selectedIndex = _useState4[0],\n      setSelectedIndex = _useState4[1];\n\n  var _useState5 = useState(new Array(pinCount).fill(null)),\n      _useState6 = _slicedToArray(_useState5, 2),\n      inputRefs = _useState6[0],\n      setInputRefs = _useState6[1];\n\n  var handleChangeText = function handleChangeText(e, index, value) {\n    e.preventDefault();\n    console.log('hit');\n\n    var newOtpValue = _toConsumableArray(otpValue);\n\n    newOtpValue[index] = value !== '' ? _toConsumableArray(value).pop().toString() : value;\n    setOtpValue(newOtpValue);\n\n    if (index < inputRefs.length) {\n      focusField(index + 1);\n    } else {\n      blurAllFields();\n    }\n  };\n\n  var focusField = function focusField(index) {\n    if (index < inputRefs.length) {\n      console.log('focusField');\n      setTimeout(function () {\n        return inputRefs[index].focus();\n      }, 0);\n      setSelectedIndex(index);\n    }\n  };\n\n  var blurAllFields = function blurAllFields() {\n    inputRefs.forEach(function (field) {\n      return setTimeout(function () {\n        return field.focus();\n      }, 0);\n    });\n    setSelectedIndex(-1);\n  };\n\n  var handleKeyPressTextInput = function handleKeyPressTextInput(e, index, key) {\n    e.preventDefault();\n\n    if (key === 'Backspace') {\n      if (!otpValue[index] && index > 0) {\n        handleChangeText(e, index - 1, '');\n        focusField(index - 1);\n      }\n    }\n  };\n\n  var SingleOTPElement = function SingleOTPElement(props) {\n    var focused = props.focused,\n        index = props.index,\n        inputRefs = props.inputRefs,\n        rest = _objectWithoutProperties(props, _excluded);\n\n    return _jsx(View, {\n      style: focused ? styles.SingleOTPElementFocused : styles.SingleOTPElement,\n      children: _jsx(TextInput, _objectSpread({\n        ref: function ref(_ref) {\n          return inputRefs[index] = _ref;\n        },\n        keyboardType: \"numeric\",\n        onKeyPress: function onKeyPress(e) {\n          handleKeyPressTextInput(e, index, e.nativeEvent.key);\n        },\n        textContentType: \"oneTimeCode\",\n        onChange: function onChange(e) {\n          return handleChangeText(e, index, e.nativeEvent.text);\n        },\n        placeholder: \".\"\n      }, rest))\n    });\n  };\n\n  return _jsx(View, {\n    style: {\n      flexDirection: 'row'\n    },\n    children: _jsx(TouchableWithoutFeedback, {\n      onPress: function onPress() {\n        var filledPinCount = otpValue.filter(function (digit) {\n          return digit !== null && digit !== undefined && digit !== \"\";\n        }).length;\n        console.log(Math.min(filledPinCount, pinCount - 1));\n        focusField(Math.min(filledPinCount, pinCount - 1));\n      },\n      children: _jsx(_Fragment, {\n        children: new Array(pinCount).fill(\"\").map(function (_, index) {\n          return _jsx(SingleOTPElement, {\n            inputRefs: inputRefs,\n            index: index,\n            value: otpValue[index],\n            focused: selectedIndex === index\n          }, \"OTP-\" + index);\n        })\n      })\n    })\n  });\n};\nvar styles = StyleSheet.create({\n  SingleOTPElement: {\n    height: 50,\n    width: 50,\n    margin: 2,\n    borderStyle: 'solid',\n    borderWidth: 2,\n    borderColor: '#240071'\n  },\n  SingleOTPElementFocused: {\n    height: 50,\n    width: 50,\n    margin: 5,\n    borderStyle: 'solid',\n    borderWidth: 2,\n    borderColor: '#0086A4'\n  }\n});","map":{"version":3,"sources":["/Users/alecreser/Desktop/Projects/NearBye/components/OTP.tsx"],"names":["useState","OTP","props","pinCount","Array","fill","otpValue","setOtpValue","selectedIndex","setSelectedIndex","inputRefs","setInputRefs","handleChangeText","e","index","value","preventDefault","console","log","newOtpValue","pop","toString","length","focusField","blurAllFields","setTimeout","focus","forEach","field","handleKeyPressTextInput","key","SingleOTPElement","focused","rest","styles","SingleOTPElementFocused","ref","nativeEvent","text","flexDirection","filledPinCount","filter","digit","undefined","Math","min","map","_","StyleSheet","create","height","width","margin","borderStyle","borderWidth","borderColor"],"mappings":"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","sourcesContent":["import { MutableRefObject, useEffect, useLayoutEffect, useRef, useState } from \"react\";\nimport { NativeSyntheticEvent, StyleSheet, TextInput, TextInputChangeEventData, TextInputKeyPressEventData, TouchableWithoutFeedback, View } from \"react-native\";\nimport usePrevious from \"../hooks/usePrevious\";\n\ntype OTPProps = {\n    pinCount: number;\n};\n\nexport const OTP = (props: OTPProps) => {\n    const {pinCount} = props;\n    const [otpValue, setOtpValue] = useState<string[]>(new Array(pinCount).fill(\"\"));\n    const [selectedIndex, setSelectedIndex] = useState(0);\n    const [inputRefs, setInputRefs] = useState<(TextInput | null)[]>(new Array(pinCount).fill(null));\n\n    const handleChangeText = (e: NativeSyntheticEvent<any>, index: number, value: string) => {\n        e.preventDefault();\n        console.log('hit');\n        let newOtpValue = [...otpValue];\n        newOtpValue[index] = value !== '' ? [...value].pop()!.toString() : value;\n        setOtpValue(newOtpValue);\n        if (index < inputRefs.length) {\n            focusField(index+1);\n        } else {\n            blurAllFields();\n        }\n        // setFocusedIndex(index);\n    }\n\n    const focusField = (index: number) => {\n        if (index < inputRefs.length) {\n            console.log('focusField');\n            setTimeout(() => (inputRefs[index] as TextInput).focus(), 0)\n            setSelectedIndex(index);\n        }\n    }\n\n    const blurAllFields = () => {\n        inputRefs.forEach((field: TextInput | null) => setTimeout(() => (field as TextInput).focus(), 0))\n        setSelectedIndex(-1);\n    }\n\n    const handleKeyPressTextInput = (e: NativeSyntheticEvent<any>, index: number, key: string) => {\n        e.preventDefault();\n        if (key === 'Backspace') {\n            if (!otpValue[index] && index > 0) {\n                handleChangeText(e, index - 1, '')\n                focusField(index - 1)\n            }\n        }\n    }\n\n    const SingleOTPElement = (props: SingleOTPElementProps) => {\n        const { focused, index, inputRefs, ...rest } = props;\n    \n        return (\n            <View style={focused ? styles.SingleOTPElementFocused : styles.SingleOTPElement }>\n                <TextInput\n                    ref={ref => inputRefs[index] = ref}\n                    keyboardType=\"numeric\"\n                    onKeyPress={(e: NativeSyntheticEvent<TextInputKeyPressEventData>) => { handleKeyPressTextInput(e, index, e.nativeEvent.key) }}\n                    textContentType=\"oneTimeCode\"\n                    onChange={(e: NativeSyntheticEvent<TextInputChangeEventData>) => handleChangeText(e, index, e.nativeEvent.text)}\n                    placeholder=\".\"\n                    {...rest}\n                />\n            </View>\n        );\n    }\n    \n    return (\n        <View style={{flexDirection: 'row'}}>\n            <TouchableWithoutFeedback\n                onPress={() => {\n                    let filledPinCount = otpValue.filter((digit) => { return (digit !== null && digit !== undefined && digit !== \"\") }).length;\n                    console.log(Math.min(filledPinCount, pinCount - 1));\n                    focusField(Math.min(filledPinCount, pinCount - 1))\n                }}\n            >\n                <>\n                {new Array(pinCount).fill(\"\").map((_, index) => {\n                    // const handleInputFocus = (element: ) => {\n                    //     if (elmnt.key === \"Delete\" || elmnt.key === \"Backspace\") {\n                    //       const next = elmnt.target.tabIndex - 2;\n                    //       if (next > -1) {\n                    \n                    //         elmnt.target.form.elements[next].focus()\n                    //       }\n                    //     }\n                    //     else {\n                    //       console.log(\"next\");\n                        \n                    //         const next = elmnt.target.tabIndex;\n                    //         if (next < 5) {\n                    //           elmnt.target.form.elements[next].focus()\n                    //         }\n                    //     }\n                    \n                    //   }\n\n                    return (\n                        <SingleOTPElement\n                            key={`OTP-${index}`}\n                            inputRefs={inputRefs}\n                            index={index}\n                            value={otpValue[index]}\n                            focused={selectedIndex === index}\n                        />\n                    );\n                })}\n                </>\n            </TouchableWithoutFeedback>\n        </View>\n    );\n}\n\ntype SingleOTPElementProps = {\n    value: string;\n    index: number,\n    inputRefs: (TextInput | null) [],\n    focused: boolean;\n};\n\nconst styles = StyleSheet.create({\n\tSingleOTPElement: {\n        height: 50,\n        width: 50,\n        margin: 2,\n        borderStyle: 'solid',\n        borderWidth: 2,\n        borderColor: '#240071'\n\t},\n    SingleOTPElementFocused: {\n        height: 50,\n        width: 50,\n        margin: 5,\n        borderStyle: 'solid',\n        borderWidth: 2,\n        borderColor: '#0086A4'\n\t}\n});"]},"metadata":{},"sourceType":"module"}