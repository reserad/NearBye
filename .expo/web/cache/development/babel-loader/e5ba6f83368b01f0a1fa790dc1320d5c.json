{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _excluded = [\"focused\", \"index\", \"inputRefs\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport var OTP = function OTP(props) {\n  var pinCount = props.pinCount;\n\n  var _useState = useState(new Array(pinCount).fill(\"\")),\n      _useState2 = _slicedToArray(_useState, 2),\n      otpValue = _useState2[0],\n      setOtpValue = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selectedIndex = _useState4[0],\n      setSelectedIndex = _useState4[1];\n\n  var inputRefs = new Array(pinCount).fill(null);\n\n  var handleChangeText = function handleChangeText(index, value) {\n    console.log('hit');\n\n    var newOtpValue = _toConsumableArray(otpValue);\n\n    newOtpValue[index] = value;\n    setOtpValue(newOtpValue);\n\n    if (index < inputRefs.length) {\n      focusField(index);\n    } else {\n      blurAllFields();\n    }\n  };\n\n  var focusField = function focusField(index) {\n    if (index < inputRefs.length) {\n      console.log('focusField');\n      inputRefs[index].focus();\n      setSelectedIndex(index);\n    }\n  };\n\n  var blurAllFields = function blurAllFields() {\n    inputRefs.forEach(function (field) {\n      return field.blur();\n    });\n    setSelectedIndex(-1);\n  };\n\n  var handleKeyPressTextInput = function handleKeyPressTextInput(index, key) {\n    console.log(key);\n\n    if (key === 'Backspace') {\n      if (!otpValue[index] && index > 0) {\n        handleChangeText(index - 1, '');\n        focusField(index - 1);\n      }\n    }\n  };\n\n  var SingleOTPElement = function SingleOTPElement(props) {\n    var focused = props.focused,\n        index = props.index,\n        inputRefs = props.inputRefs,\n        rest = _objectWithoutProperties(props, _excluded);\n\n    return _jsx(TextInput, _objectSpread({\n      ref: function ref(_ref2) {\n        return inputRefs[index] = _ref2;\n      },\n      keyboardType: \"numeric\",\n      style: focused ? styles.SingleOTPElementFocused : styles.SingleOTPElement,\n      onKeyPress: function onKeyPress(_ref) {\n        var key = _ref.nativeEvent.key;\n        handleKeyPressTextInput(index, key);\n      },\n      textContentType: \"oneTimeCode\"\n    }, rest));\n  };\n\n  return _jsx(View, {\n    style: {\n      flexDirection: 'row'\n    },\n    children: _jsx(TouchableWithoutFeedback, {\n      onPress: function onPress() {\n        var filledPinCount = otpValue.filter(function (digit) {\n          return digit !== null && digit !== undefined && digit !== \"\";\n        }).length;\n        focusField(Math.min(filledPinCount, pinCount - 1));\n      },\n      children: _jsx(_Fragment, {\n        children: new Array(pinCount).fill(\"\").map(function (_, index) {\n          return _jsx(SingleOTPElement, {\n            inputRefs: inputRefs,\n            index: index,\n            value: otpValue[index],\n            onChangeText: function onChangeText(value) {\n              return handleChangeText(index, value);\n            },\n            focused: selectedIndex === index\n          }, \"OTP-\" + index);\n        })\n      })\n    })\n  });\n};\nvar styles = StyleSheet.create({\n  SingleOTPElement: {\n    height: 50,\n    width: 50,\n    margin: 2,\n    borderStyle: 'solid',\n    borderWidth: 2,\n    borderColor: 'black'\n  },\n  SingleOTPElementFocused: {\n    height: 50,\n    width: 50,\n    margin: 2,\n    borderStyle: 'solid',\n    borderWidth: 2,\n    borderColor: 'white'\n  }\n});","map":{"version":3,"sources":["/Users/alecreser/Desktop/Projects/NearBye/components/OTP.tsx"],"names":["useState","OTP","props","pinCount","Array","fill","otpValue","setOtpValue","selectedIndex","setSelectedIndex","inputRefs","handleChangeText","index","value","console","log","newOtpValue","length","focusField","blurAllFields","focus","forEach","field","blur","handleKeyPressTextInput","key","SingleOTPElement","focused","rest","ref","styles","SingleOTPElementFocused","nativeEvent","flexDirection","filledPinCount","filter","digit","undefined","Math","min","map","_","StyleSheet","create","height","width","margin","borderStyle","borderWidth","borderColor"],"mappings":"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","sourcesContent":["import { MutableRefObject, useEffect, useLayoutEffect, useRef, useState } from \"react\";\nimport { NativeSyntheticEvent, StyleSheet, TextInput, TextInputChangeEventData, TouchableWithoutFeedback, View } from \"react-native\";\nimport usePrevious from \"../hooks/usePrevious\";\n\ntype OTPProps = {\n    pinCount: number;\n};\n\nexport const OTP = (props: OTPProps) => {\n    const {pinCount} = props;\n    const [otpValue, setOtpValue] = useState<string[]>(new Array(pinCount).fill(\"\"));\n    const [selectedIndex, setSelectedIndex] = useState(0);\n    const inputRefs = new Array(pinCount).fill(null);\n\n    const handleChangeText = (index: number, value: string) => {\n        console.log('hit');\n        let newOtpValue = [...otpValue];\n        newOtpValue[index] = value;\n        setOtpValue(newOtpValue);\n        if (index < inputRefs.length) {\n            focusField(index);\n        } else {\n            blurAllFields();\n        }\n        // setFocusedIndex(index);\n    }\n\n    const focusField = (index: number) => {\n        if (index < inputRefs.length) {\n            console.log('focusField');\n            (inputRefs[index] as TextInput).focus();\n            setSelectedIndex(index);\n        }\n    }\n\n    const blurAllFields = () => {\n        inputRefs.forEach((field: TextInput | null) => (field as TextInput).blur())\n        setSelectedIndex(-1);\n    }\n\n    const handleKeyPressTextInput = (index: number, key: string) => {\n        console.log(key);\n        if (key === 'Backspace') {\n            if (!otpValue[index] && index > 0) {\n                handleChangeText(index - 1, '')\n                focusField(index - 1)\n            }\n        }\n    }\n\n    const SingleOTPElement = (props: SingleOTPElementProps) => {\n        const { focused, index, inputRefs, ...rest } = props;\n    \n        return (\n            <TextInput\n                ref={ref => inputRefs[index] = ref}\n                keyboardType=\"numeric\"\n                style={focused ? styles.SingleOTPElementFocused : styles.SingleOTPElement }\n                onKeyPress={({ nativeEvent: { key } }) => { handleKeyPressTextInput(index, key) }}\n                textContentType=\"oneTimeCode\"\n                {...rest}\n            />\n        );\n    }\n    \n    return (\n        <View style={{flexDirection: 'row'}}>\n            <TouchableWithoutFeedback\n                onPress={() => {\n                    let filledPinCount = otpValue.filter((digit) => { return (digit !== null && digit !== undefined && digit !== \"\") }).length;\n                    focusField(Math.min(filledPinCount, pinCount - 1))\n                }}\n            >\n                <>\n                {new Array(pinCount).fill(\"\").map((_, index) => {\n                    // const handleInputFocus = (element: ) => {\n                    //     if (elmnt.key === \"Delete\" || elmnt.key === \"Backspace\") {\n                    //       const next = elmnt.target.tabIndex - 2;\n                    //       if (next > -1) {\n                    \n                    //         elmnt.target.form.elements[next].focus()\n                    //       }\n                    //     }\n                    //     else {\n                    //       console.log(\"next\");\n                        \n                    //         const next = elmnt.target.tabIndex;\n                    //         if (next < 5) {\n                    //           elmnt.target.form.elements[next].focus()\n                    //         }\n                    //     }\n                    \n                    //   }\n\n                    return (\n                        <SingleOTPElement\n                            key={`OTP-${index}`}\n                            inputRefs={inputRefs}\n                            index={index}\n                            value={otpValue[index]}\n                            onChangeText={value => handleChangeText(index, value)}\n                            focused={selectedIndex === index}\n                        />\n                    );\n                })}\n                </>\n            </TouchableWithoutFeedback>\n        </View>\n    );\n}\n\ntype SingleOTPElementProps = {\n    value: string;\n    index: number,\n    onChangeText: (value: string) => void;\n    inputRefs: (TextInput | null) [],\n    focused: boolean;\n};\n\nconst styles = StyleSheet.create({\n\tSingleOTPElement: {\n        height: 50,\n        width: 50,\n        margin: 2,\n        borderStyle: 'solid',\n        borderWidth: 2,\n        borderColor: 'black'\n\t},\n    SingleOTPElementFocused: {\n        height: 50,\n        width: 50,\n        margin: 2,\n        borderStyle: 'solid',\n        borderWidth: 2,\n        borderColor: 'white'\n\t}\n});"]},"metadata":{},"sourceType":"module"}