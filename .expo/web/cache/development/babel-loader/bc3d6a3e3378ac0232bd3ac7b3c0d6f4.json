{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport var handleResponse = function handleResponse(promise) {\n  var response;\n  return _regeneratorRuntime.async(function handleResponse$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(promise);\n\n        case 3:\n          response = _context.sent;\n\n          if (!(response.status === 200)) {\n            _context.next = 8;\n            break;\n          }\n\n          return _context.abrupt(\"return\", {\n            success: response.data\n          });\n\n        case 8:\n          return _context.abrupt(\"return\", {\n            error: response.statusText\n          });\n\n        case 9:\n          _context.next = 14;\n          break;\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](0);\n\n          if (_context.t0.response) {\n            console.log(_context.t0.response.status);\n          }\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 11]], Promise);\n};","map":{"version":3,"sources":["/Users/alecreser/Desktop/Projects/NearBye/helpers/httpResponseHelper.ts"],"names":["handleResponse","promise","response","status","success","data","error","statusText","console","log"],"mappings":";AAEA,OAAO,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAECA,OAFD;;AAAA;AAEhBC,UAAAA,QAFgB;;AAAA,gBAGlBA,QAAQ,CAACC,MAAT,KAAoB,GAHF;AAAA;AAAA;AAAA;;AAAA,2CAIX;AACHC,YAAAA,OAAO,EAAEF,QAAQ,CAACG;AADf,WAJW;;AAAA;AAAA,2CAQX;AACHC,YAAAA,KAAK,EAAEJ,QAAQ,CAACK;AADb,WARW;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAatB,cAAI,YAAIL,QAAR,EAAkB;AACdM,YAAAA,OAAO,CAACC,GAAR,CAAY,YAAIP,QAAJ,CAAaC,MAAzB;AACH;;AAfqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB","sourcesContent":["import { AxiosResponse } from \"axios\";\n\nexport const handleResponse = async (promise: Promise<AxiosResponse<any, any>>) => {\n    try {\n        const response = await promise;\n        if (response.status === 200) {\n            return {\n                success: response.data\n            }\n        } else {\n            return {\n                error: response.statusText\n            }\n        }\n    } catch (err: any) {\n        if (err.response) {\n            console.log(err.response.status);\n        }\n        \n    }\n}"]},"metadata":{},"sourceType":"module"}