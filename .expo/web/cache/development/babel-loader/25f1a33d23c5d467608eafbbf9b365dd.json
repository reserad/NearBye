{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _excluded = [\"focused\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useLayoutEffect, useRef, useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport usePrevious from \"../hooks/usePrevious\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var OTP = function OTP(props) {\n  var length = props.length;\n\n  var _useState = useState(new Array(length).fill(\"\")),\n      _useState2 = _slicedToArray(_useState, 2),\n      inputs = _useState2[0],\n      setInputs = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      focusedIndex = _useState4[0],\n      setFocusedIndex = _useState4[1];\n\n  var handleSetInputs = function handleSetInputs(index, value) {\n    var newInputArray = _toConsumableArray(inputs);\n\n    newInputArray[index] = value;\n    setInputs(newInputArray);\n    setFocusedIndex(index);\n  };\n\n  return _jsx(View, {\n    style: {\n      flexDirection: 'row'\n    },\n    children: new Array(length).fill(\"\").map(function (_, index) {\n      return _jsx(SingleOTPElement, {\n        value: inputs[index],\n        onChangeText: function onChangeText(value) {\n          return handleSetInputs(index, value);\n        },\n        maxLength: 1,\n        focused: focusedIndex === index\n      }, \"OTP-\" + index);\n    })\n  });\n};\n\nvar SingleOTPElement = function SingleOTPElement(props) {\n  var focused = props.focused,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  var inputRef = useRef(null);\n  var prevFocus = usePrevious(!!focused);\n  useLayoutEffect(function () {\n    if (inputRef.current) {\n      console.log(inputRef.current);\n    }\n  }, [focused, prevFocus]);\n  return _jsx(TextInput, _objectSpread({\n    ref: inputRef,\n    keyboardType: \"numeric\",\n    style: focused ? styles.SingleOTPElementFocused : styles.SingleOTPElement\n  }, rest));\n};\n\nvar styles = StyleSheet.create({\n  SingleOTPElement: {\n    height: 50,\n    width: 50,\n    margin: 2,\n    borderStyle: 'solid',\n    borderWidth: 2,\n    borderColor: 'black'\n  },\n  SingleOTPElementFocused: {\n    height: 50,\n    width: 50,\n    margin: 2,\n    borderStyle: 'solid',\n    borderWidth: 2,\n    borderColor: 'white'\n  }\n});","map":{"version":3,"sources":["/Users/alecreser/Desktop/Projects/NearBye/components/OTP.tsx"],"names":["useLayoutEffect","useRef","useState","usePrevious","OTP","props","length","Array","fill","inputs","setInputs","focusedIndex","setFocusedIndex","handleSetInputs","index","value","newInputArray","flexDirection","map","_","SingleOTPElement","focused","rest","inputRef","prevFocus","current","console","log","styles","SingleOTPElementFocused","StyleSheet","create","height","width","margin","borderStyle","borderWidth","borderColor"],"mappings":"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","sourcesContent":["import { useEffect, useLayoutEffect, useRef, useState } from \"react\";\nimport { NativeSyntheticEvent, StyleSheet, TextInput, TextInputChangeEventData, View } from \"react-native\";\nimport usePrevious from \"../hooks/usePrevious\";\n\ntype OTPProps = {\n    length: number;\n};\n\nexport const OTP = (props: OTPProps) => {\n    const {length} = props;\n    const [inputs, setInputs] = useState<string[]>(new Array(length).fill(\"\"));\n    const [focusedIndex, setFocusedIndex] = useState(0);\n    //const [inputRefs, setInputRefs] = useState([]);\n\n    // useEffect(() => {\n    //     let refs = Array.from(Array(length).keys()).map(entry => {\n    //         return useRef();\n    //     });\n\n        \n    // }, [length])\n\n    const handleSetInputs = (index: number, value: string) => {\n        let newInputArray = [...inputs];\n        newInputArray[index] = value;\n        setInputs(newInputArray);\n        setFocusedIndex(index);\n    }\n    \n    return (\n        <View style={{flexDirection: 'row'}}>\n            {new Array(length).fill(\"\").map((_, index) => {\n                // const handleInputFocus = (element: ) => {\n                //     if (elmnt.key === \"Delete\" || elmnt.key === \"Backspace\") {\n                //       const next = elmnt.target.tabIndex - 2;\n                //       if (next > -1) {\n                \n                //         elmnt.target.form.elements[next].focus()\n                //       }\n                //     }\n                //     else {\n                //       console.log(\"next\");\n                     \n                //         const next = elmnt.target.tabIndex;\n                //         if (next < 5) {\n                //           elmnt.target.form.elements[next].focus()\n                //         }\n                //     }\n                \n                //   }\n\n                return (\n                    <SingleOTPElement\n                        key={`OTP-${index}`}\n                        value={inputs[index]}\n                        //onKeyPress={this.keyPressed}\n                        onChangeText={value => handleSetInputs(index, value)}\n                        maxLength={1}\n                        focused={focusedIndex === index}\n                    />\n                );\n            })}\n        </View>\n    );\n}\n\ntype SingleOTPElementProps = {\n    value: string;\n    onChangeText: (value: string) => void;\n    maxLength: number;\n    focused: boolean;\n};\n\nconst SingleOTPElement = (props: SingleOTPElementProps) => {\n    const { focused, ...rest } = props;\n    const inputRef = useRef(null);\n    const prevFocus = usePrevious(!!focused);\n    //const [focused, setFocused] = useState(false);\n\n    useLayoutEffect(() => {\n        if (inputRef.current) {\n            console.log(inputRef.current);\n            // if (focused) {\n            //     inputRef.current.focus();\n            // }\n            // if (focused && focused !== prevFocus) {\n            //     inputRef.current.focus();\n            //     inputRef.current.select();\n            // }\n        }\n    }, [focused, prevFocus]);\n\n    return (\n        <TextInput\n            ref={inputRef}\n            keyboardType=\"numeric\"\n            style={focused ? styles.SingleOTPElementFocused : styles.SingleOTPElement }\n            {...rest}\n            // onFocus={() => setFocused(true)}\n            // onBlur={() => setFocused(false)}\n        />\n    );\n}\n\nconst styles = StyleSheet.create({\n\tSingleOTPElement: {\n        height: 50,\n        width: 50,\n        margin: 2,\n        borderStyle: 'solid',\n        borderWidth: 2,\n        borderColor: 'black'\n\t},\n    SingleOTPElementFocused: {\n        height: 50,\n        width: 50,\n        margin: 2,\n        borderStyle: 'solid',\n        borderWidth: 2,\n        borderColor: 'white'\n\t}\n});"]},"metadata":{},"sourceType":"module"}