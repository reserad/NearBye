{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { FontAwesome } from '@expo/vector-icons';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport * as React from 'react';\nimport Colors from \"../constants/Colors\";\nimport useColorScheme from \"../hooks/useColorScheme\";\nimport MessagesScreen from \"../screens/MessagesScreen\";\nimport LoginScreen from \"../screens/LoginScreen\";\nimport HomeScreen from \"../screens/HomeScreen\";\nimport SearchScreen from \"../screens/SearchScreen\";\nimport LinkingConfiguration from \"./LinkingConfiguration\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Navigation(_ref) {\n  var colorScheme = _ref.colorScheme;\n  var authenticated = false;\n  return _jsx(NavigationContainer, {\n    linking: LinkingConfiguration,\n    theme: colorScheme === 'dark' ? DarkTheme : DefaultTheme,\n    children: _jsx(RootNavigator, {\n      authenticated: authenticated\n    })\n  });\n}\nvar Stack = createNativeStackNavigator();\n\nfunction RootNavigator(props) {\n  var authenticated = props.authenticated;\n  return _jsx(Stack.Navigator, {\n    children: authenticated ? _jsxs(_Fragment, {\n      children: [_jsx(Stack.Screen, {\n        name: \"Root\",\n        component: BottomTabNavigator,\n        options: {\n          headerShown: false\n        }\n      }), _jsx(Stack.Group, {\n        screenOptions: {\n          presentation: 'modal'\n        },\n        children: _jsx(Stack.Screen, {\n          name: \"Messages\",\n          component: MessagesScreen\n        })\n      })]\n    }) : _jsx(_Fragment, {\n      children: _jsx(Stack.Screen, {\n        name: \"Login\",\n        component: LoginScreen,\n        options: {\n          headerShown: false\n        }\n      })\n    })\n  });\n}\n\nvar BottomTab = createBottomTabNavigator();\n\nfunction BottomTabNavigator() {\n  var colorScheme = useColorScheme();\n  return _jsxs(BottomTab.Navigator, {\n    initialRouteName: \"Home\",\n    screenOptions: {\n      tabBarActiveTintColor: Colors[colorScheme].tint\n    },\n    children: [_jsx(BottomTab.Screen, {\n      name: \"Home\",\n      component: HomeScreen,\n      options: function options(_ref2) {\n        var navigation = _ref2.navigation;\n        return {\n          title: 'Home',\n          tabBarIcon: function tabBarIcon(_ref3) {\n            var color = _ref3.color;\n            return _jsx(TabBarIcon, {\n              name: \"code\",\n              color: color\n            });\n          }\n        };\n      }\n    }), _jsx(BottomTab.Screen, {\n      name: \"Search\",\n      component: SearchScreen,\n      options: {\n        title: 'Search',\n        tabBarIcon: function tabBarIcon(_ref4) {\n          var color = _ref4.color;\n          return _jsx(TabBarIcon, {\n            name: \"code\",\n            color: color\n          });\n        }\n      }\n    })]\n  });\n}\n\nfunction TabBarIcon(props) {\n  return _jsx(FontAwesome, _objectSpread({\n    size: 30,\n    style: {\n      marginBottom: -3\n    }\n  }, props));\n}","map":{"version":3,"sources":["/Users/alecreser/Desktop/Projects/NearBye/navigation/index.tsx"],"names":["FontAwesome","createBottomTabNavigator","NavigationContainer","DefaultTheme","DarkTheme","createNativeStackNavigator","React","Colors","useColorScheme","MessagesScreen","LoginScreen","HomeScreen","SearchScreen","LinkingConfiguration","Navigation","colorScheme","authenticated","Stack","RootNavigator","props","BottomTabNavigator","headerShown","presentation","BottomTab","tabBarActiveTintColor","tint","navigation","title","tabBarIcon","color","TabBarIcon","marginBottom"],"mappings":"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","sourcesContent":["/**\n * If you are not familiar with React Navigation, refer to the \"Fundamentals\" guide:\n * https://reactnavigation.org/docs/getting-started\n *\n */\nimport { FontAwesome } from '@expo/vector-icons';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport * as React from 'react';\nimport { ColorSchemeName, Pressable } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\nimport MessagesScreen from '../screens/MessagesScreen';\nimport LoginScreen from '../screens/LoginScreen';\nimport HomeScreen from '../screens/HomeScreen';\nimport SearchScreen from '../screens/SearchScreen';\nimport { RootStackParamList, RootTabParamList, RootTabScreenProps } from '../types';\nimport LinkingConfiguration from './LinkingConfiguration';\n\ntype RootNavigatorProps = {\n  authenticated: boolean;\n}\n\nexport default function Navigation({ colorScheme }: { colorScheme: ColorSchemeName }) {\n  const authenticated = false;\n  return (\n    <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>\n      <RootNavigator authenticated={authenticated} />\n    </NavigationContainer>\n  );\n}\n\n/**\n * A root stack navigator is often used for displaying modals on top of all other content.\n * https://reactnavigation.org/docs/modal\n */\nconst Stack = createNativeStackNavigator<RootStackParamList>();\n\nfunction RootNavigator(props: RootNavigatorProps) {\n  const {authenticated} = props;\n  return (\n    <Stack.Navigator>\n      {authenticated ? (\n      <>\n        <Stack.Screen name=\"Root\" component={BottomTabNavigator} options={{ headerShown: false }} />\n        <Stack.Group screenOptions={{ presentation: 'modal' }}>\n          <Stack.Screen name=\"Messages\" component={MessagesScreen} />\n        </Stack.Group>\n      </>\n      ) : ( \n        <>\n          <Stack.Screen name=\"Login\" component={LoginScreen} options={{ headerShown: false }} />\n        </>\n      )}\n    </Stack.Navigator>\n  );\n}\n\n/**\n * A bottom tab navigator displays tab buttons on the bottom of the display to switch screens.\n * https://reactnavigation.org/docs/bottom-tab-navigator\n */\nconst BottomTab = createBottomTabNavigator<RootTabParamList>();\n\nfunction BottomTabNavigator() {\n  const colorScheme = useColorScheme();\n\n  return (\n    <BottomTab.Navigator\n      initialRouteName=\"Home\"\n      screenOptions={{\n        tabBarActiveTintColor: Colors[colorScheme].tint,\n      }}>\n      <BottomTab.Screen\n        name=\"Home\"\n        component={HomeScreen}\n        options={({ navigation }: RootTabScreenProps<'Home'>) => ({\n          title: 'Home',\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"code\" color={color} />\n        })}\n      />\n      <BottomTab.Screen\n        name=\"Search\"\n        component={SearchScreen}\n        options={{\n          title: 'Search',\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"code\" color={color} />,\n        }}\n      />\n    </BottomTab.Navigator>\n  );\n}\n\n/**\n * You can explore the built-in icon families and icons on the web at https://icons.expo.fyi/\n */\nfunction TabBarIcon(props: {\n  name: React.ComponentProps<typeof FontAwesome>['name'];\n  color: string;\n}) {\n  return <FontAwesome size={30} style={{ marginBottom: -3 }} {...props} />;\n}\n"]},"metadata":{},"sourceType":"module"}