{"ast":null,"code":"import ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Text } from \"./Themed\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var Button = function Button(props) {\n  var style = props.style,\n      value = props.value,\n      outline = props.outline,\n      children = props.children,\n      isLoading = props.isLoading,\n      onPress = props.onPress;\n  return _jsxs(TouchableOpacity, {\n    style: [style, styles.button, outline ? styles.buttonOutline : styles.buttonSolid],\n    onPress: onPress,\n    children: [isLoading && _jsx(ActivityIndicator, {\n      size: \"large\",\n      color: \"yellow\"\n    }), value && _jsx(Text, {\n      style: outline ? styles.buttonOutlineText : styles.buttonSolidText,\n      children: value\n    }), !value && children && {\n      children: children\n    }]\n  });\n};\nvar styles = StyleSheet.create({\n  button: {\n    height: 50,\n    borderRadius: 10,\n    width: 287,\n    paddingHorizontal: 20,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  buttonSolid: {\n    backgroundColor: '#53C08C'\n  },\n  buttonOutline: {\n    borderColor: '#53C08C',\n    borderWidth: 2\n  },\n  buttonSolidText: {\n    color: 'white',\n    fontWeight: 'bold'\n  },\n  buttonOutlineText: {\n    color: 'white',\n    fontWeight: 'bold'\n  }\n});","map":{"version":3,"sources":["/Users/alecreser/Desktop/Projects/NearBye/components/Button.tsx"],"names":["Text","Button","props","style","value","outline","children","isLoading","onPress","styles","button","buttonOutline","buttonSolid","buttonOutlineText","buttonSolidText","StyleSheet","create","height","borderRadius","width","paddingHorizontal","alignItems","justifyContent","backgroundColor","borderColor","borderWidth","color","fontWeight"],"mappings":";;;AAEA,SAASA,IAAT;;;AAUA,OAAO,IAAMC,MAA6B,GAAG,SAAhCA,MAAgC,CAACC,KAAD,EAAW;AACtD,MAAOC,KAAP,GAA8DD,KAA9D,CAAOC,KAAP;AAAA,MAAcC,KAAd,GAA8DF,KAA9D,CAAcE,KAAd;AAAA,MAAqBC,OAArB,GAA8DH,KAA9D,CAAqBG,OAArB;AAAA,MAA8BC,QAA9B,GAA8DJ,KAA9D,CAA8BI,QAA9B;AAAA,MAAwCC,SAAxC,GAA8DL,KAA9D,CAAwCK,SAAxC;AAAA,MAAmDC,OAAnD,GAA8DN,KAA9D,CAAmDM,OAAnD;AAEA,SACE,MAAC,gBAAD;AAAkB,IAAA,KAAK,EAAE,CAACL,KAAD,EAAQM,MAAM,CAACC,MAAf,EAAuBL,OAAO,GAAGI,MAAM,CAACE,aAAV,GAA0BF,MAAM,CAACG,WAA/D,CAAzB;AAAsG,IAAA,OAAO,EAAEJ,OAA/G;AAAA,eACGD,SAAS,IAAI,KAAC,iBAAD;AAAmB,MAAA,IAAI,EAAC,OAAxB;AAAgC,MAAA,KAAK,EAAC;AAAtC,MADhB,EAEGH,KAAK,IAAI,KAAC,IAAD;AAAM,MAAA,KAAK,EAAEC,OAAO,GAAGI,MAAM,CAACI,iBAAV,GAA8BJ,MAAM,CAACK,eAAzD;AAAA,gBAA2EV;AAA3E,MAFZ,EAGG,CAACA,KAAD,IAAUE,QAAV,IAAsB;AAACA,MAAAA,QAAQ,EAARA;AAAD,KAHzB;AAAA,IADF;AAOD,CAVM;AAYP,IAAMG,MAAM,GAAGM,UAAU,CAACC,MAAX,CAAkB;AAC/BN,EAAAA,MAAM,EAAE;AACNO,IAAAA,MAAM,EAAE,EADF;AAENC,IAAAA,YAAY,EAAE,EAFR;AAGNC,IAAAA,KAAK,EAAE,GAHD;AAINC,IAAAA,iBAAiB,EAAE,EAJb;AAKNC,IAAAA,UAAU,EAAE,QALN;AAMNC,IAAAA,cAAc,EAAE;AANV,GADuB;AAS/BV,EAAAA,WAAW,EAAE;AACXW,IAAAA,eAAe,EAAE;AADN,GATkB;AAY/BZ,EAAAA,aAAa,EAAE;AACba,IAAAA,WAAW,EAAE,SADA;AAEbC,IAAAA,WAAW,EAAE;AAFA,GAZgB;AAgB/BX,EAAAA,eAAe,EAAE;AACfY,IAAAA,KAAK,EAAE,OADQ;AAEfC,IAAAA,UAAU,EAAE;AAFG,GAhBc;AAoB/Bd,EAAAA,iBAAiB,EAAE;AACjBa,IAAAA,KAAK,EAAE,OADU;AAEjBC,IAAAA,UAAU,EAAE;AAFK;AApBY,CAAlB,CAAf","sourcesContent":["\nimport { ActivityIndicator, StyleProp, StyleSheet, TouchableOpacity, ViewStyle } from 'react-native';\nimport { Text, TextProps } from './Themed';\n\ntype ButtonProps = {\n  style:  StyleProp<ViewStyle>\n  value?: string;\n  outline?: boolean;\n  isLoading?: boolean;\n  onPress: () => void;\n}\n\nexport const Button: React.FC<ButtonProps> = (props) => {\n  const {style, value, outline, children, isLoading, onPress} = props;\n\n  return (\n    <TouchableOpacity style={[style, styles.button, outline ? styles.buttonOutline : styles.buttonSolid]} onPress={onPress}>\n      {isLoading && <ActivityIndicator size=\"large\" color=\"yellow\" />}\n      {value && <Text style={outline ? styles.buttonOutlineText : styles.buttonSolidText}>{value}</Text>}\n      {!value && children && {children}}\n    </TouchableOpacity>\n  );\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    height: 50,\n    borderRadius: 10,\n    width: 287,\n    paddingHorizontal: 20,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  buttonSolid: {\n    backgroundColor: '#53C08C'\n  },\n  buttonOutline: {\n    borderColor: '#53C08C',\n    borderWidth: 2\n  },\n  buttonSolidText: {\n    color: 'white',\n    fontWeight: 'bold'\n  },\n  buttonOutlineText: {\n    color: 'white',\n    fontWeight: 'bold'\n  }\n});"]},"metadata":{},"sourceType":"module"}